---
description: Configuration for a multi-platform React app with Tauri, defining common components with platform-specific styles for iOS (Common and Liquid Glass), Windows (Fluent UI React v9), and Web/Android (PrimeReact). Includes a test page to showcase components across platforms.
globs:
alwaysApply: false
---

## Project Overview
This is a multi-platform React app built with Tauri, targeting Windows, iOS, iPadOS, macOS, and Android. The app uses a modular component structure with platform-specific styling:
- **iOS/iPadOS/macOS**: Two styles:
  - **Common**: Standard iOS styling following Human Interface Guidelines.
  - **Liquid Glass**: Apple’s WWDC 2024 Liquid Glass effect, using the `liquid-glass-react` library (https://github.com/rdev/liquid-glass-react).
- **Windows**: Uses Fluent UI React v9 (https://react.fluentui.dev).
- **Web/Android**: Uses PrimeReact (https://primereact.org), ensuring responsive design.
A `testComponents` folder includes a test page with tabs to display all components for each platform’s style, using test data.

## Component Structure
Components are organized in the `components` folder, with common logic in `components/common` and platform-specific styles in subfolders. Each component has an `Index.tsx` that uses platform detection to render the appropriate styled component.

### File Structure
```
components/
  common/
    Button/
      Index.tsx
      styled/
        IOSCommonButton.tsx
        IOSLiquidGlassButton.tsx
        WindowsButton.tsx
        PrimeReactButton.tsx
    Navbar/
      Index.tsx
      styled/
        IOSCommonNavbar.tsx
        IOSLiquidGlassNavbar.tsx
        WindowsNavbar.tsx
        PrimeReactNavbar.tsx
    Alert/
      Index.tsx
      styled/
        IOSCommonAlert.tsx
        IOSLiquidGlassAlert.tsx
        WindowsAlert.tsx
        PrimeReactAlert.tsx
    Panel/
      Index.tsx
      styled/
        IOSCommonPanel.tsx
        IOSLiquidGlassPanel.tsx
        WindowsPanel.tsx
        PrimeReactPanel.tsx
    Input/
      Index.tsx
      styled/
        IOSCommonInput.tsx
        IOSLiquidGlassInput.tsx
        WindowsInput.tsx
        PrimeReactInput.tsx
    List/
      Index.tsx
      styled/
        IOSCommonList.tsx
        IOSLiquidGlassList.tsx
        WindowsList.tsx
        PrimeReactList.tsx
    Modal/
      Index.tsx
      styled/
        IOSCommonModal.tsx
        IOSLiquidGlassModal.tsx
        WindowsModal.tsx
        PrimeReactModal.tsx
    Icon/
      Index.tsx
      styled/
        IOSCommonIcon.tsx
        IOSLiquidGlassIcon.tsx
        WindowsIcon.tsx
        PrimeReactIcon.tsx
    Spinner/
      Index.tsx
      styled/
        IOSCommonSpinner.tsx
        IOSLiquidGlassSpinner.tsx
        WindowsSpinner.tsx
        PrimeReactSpinner.tsx
    Card/
      Index.tsx
      styled/
        IOSCommonCard.tsx
        IOSLiquidGlassCard.tsx
        WindowsCard.tsx
        PrimeReactCard.tsx
    Dropdown/
      Index.tsx
      styled/
        IOSCommonDropdown.tsx
        IOSLiquidGlassDropdown.tsx
        WindowsDropdown.tsx
        PrimeReactDropdown.tsx
    ActionSheet/
      Index.tsx
      styled/
        IOSCommonActionSheet.tsx
        IOSLiquidGlassActionSheet.tsx
        WindowsActionSheet.tsx
        PrimeReactActionSheet.tsx
    AlertDialog/
      Index.tsx
      styled/
        IOSCommonAlertDialog.tsx
        IOSLiquidGlassAlertDialog.tsx
        WindowsAlertDialog.tsx
        PrimeReactAlertDialog.tsx
    Checkbox/
      Index.tsx
      styled/
        IOSCommonCheckbox.tsx
        IOSLiquidGlassCheckbox.tsx
        WindowsCheckbox.tsx
        PrimeReactCheckbox.tsx
    Form/
      Index.tsx
      styled/
        IOSCommonForm.tsx
        IOSLiquidGlassForm.tsx
        WindowsForm.tsx
        PrimeReactForm.tsx
    FormSection/
      Index.tsx
      styled/
        IOSCommonFormSection.tsx
        IOSLiquidGlassFormSection.tsx
        WindowsFormSection.tsx
        PrimeReactFormSection.tsx
    SegmentControl/
      Index.tsx
      styled/
        IOSCommonSegmentControl.tsx
        IOSLiquidGlassSegmentControl.tsx
        WindowsSegmentControl.tsx
        PrimeReactSegmentControl.tsx
    NavigationTitleBar/
      Index.tsx
      styled/
        IOSCommonNavigationTitleBar.tsx
        IOSLiquidGlassNavigationTitleBar.tsx
        WindowsNavigationTitleBar.tsx
        PrimeReactNavigationTitleBar.tsx
testComponents/
  TestPage.tsx
```

### Component Requirements
Each component in `components/common/[Component]/Index.tsx` uses a `getPlatform()` function (provided by Tauri, in `utils/getPlatform.ts`) to detect the platform and render the appropriate styled component:
- **iOS/iPadOS/macOS**: 
  - **Common**: Follows Apple’s Human Interface Guidelines (e.g., rounded corners, SF Symbols, safe area insets).
  - **Liquid Glass**: Uses `liquid-glass-react` (https://github.com/rdev/liquid-glass-react) with props like `displacementScale`, `blurAmount`, `saturation`, `aberrationIntensity`, `elasticity`, `cornerRadius`, and `mouseContainer` for interactive effects. Ensure compatibility with iOS 26+ and graceful degradation on older versions.
- **Windows**: Uses Fluent UI React v9 (https://react.fluentui.dev) with components like `Button`, `Nav`, `MessageBar`, etc., following Fluent Design (acrylic blur, rectangular shapes, hover states).
- **Web/Android**: Uses PrimeReact (https://primereact.org) with responsive components (e.g., `Button`, `Menubar`, `Toast`, `Card`) styled with TailwindCSS for adaptability across screen sizes.

#### Common Components and Props
1. **Button**
   - Props: `variant` (primary, secondary, destructive), `size`, `disabled`, `loading`, `onClick`, `icon`, `children`, `aria-label`.
   - iOS Liquid Glass: Apply `liquid-glass-react` with `displacementScale=64`, `blurAmount=0.1`, `elasticity=0.35`.
   - Windows: Use Fluent UI’s `Button` with `appearance` (primary, subtle).
   - PrimeReact: Use `Button` with `severity`, `rounded`, responsive classes.

2. **Navbar**
   - Props: `items` (array of `{ label, icon, route, badge }`), `position` (top, bottom, sidebar), `activeItem`, `onItemClick`, `showLabels`, `safeArea`.
   - iOS Liquid Glass: Use `liquid-glass-react` with translucent background, safe area support.
   - Windows: Use Fluent UI’s `Nav` with `groups` for navigation.
   - PrimeReact: Use `Menubar` with responsive `model`.

3. **Alert**
   - Props: `type` (success, error, warning, info), `message`, `dismissible`, `autoDismiss`, `onDismiss`, `icon`, `position`.
   - iOS Liquid Glass: Use `liquid-glass-react` for frosted banner.
   - Windows: Use Fluent UI’s `MessageBar` with `intent`.
   - PrimeReact: Use `Toast` with `severity`, responsive positioning.

4. **Panel**
   - Props: `children`, `variant` (modal, card, sidebar), `scrollable`, `onClose`, `padding`, `backdrop`.
   - iOS Liquid Glass: Use `liquid-glass-react` with `blurAmount=0.0625`, `cornerRadius=999`.
   - Windows: Use Fluent UI’s `Panel` with `type` (small, large).
   - PrimeReact: Use `Panel` with `header`, responsive layout.

5. **Input**
   - Props: `type` (text, password, email, number), `value`, `onChange`, `placeholder`, `disabled`, `error`, `label`, `icon`.
   - iOS Liquid Glass: Use `liquid-glass-react` for translucent input background.
   - Windows: Use Fluent UI’s `TextField` with `validationState`.
   - PrimeReact: Use `InputText` with `invalid`, responsive sizing.

6. **List**
   - Props: `items` (array of `{ id, label, sublabel, icon }`), `onSelect`, `selected`, `divider`, `header`, `scrollable`.
   - iOS Liquid Glass: Use `liquid-glass-react` for grouped list style.
   - Windows: Use Fluent UI’s `List` with `items`.
   - PrimeReact: Use `DataView` or `ListBox` with responsive `layout`.

7. **Modal**
   - Props: `open`, `onClose`, `children`, `title`, `backdropDismiss`, `size`.
   - iOS Liquid Glass: Use `liquid-glass-react` with `backdrop`, `elasticity=0.3`.
   - Windows: Use Fluent UI’s `Dialog` with `modalProps`.
   - PrimeReact: Use `Dialog` with `responsive`, `header`.

8. **Icon**
   - Props: `name`, `size`, `color`, `aria-label`, `onClick`.
   - iOS Liquid Glass: Use `liquid-glass-react` with SF Symbols, `saturation=140`.
   - Windows: Use Fluent UI’s `Icon` with `iconName`.
   - PrimeReact: Use `IconField` or custom icons with TailwindCSS.

9. **Spinner**
   - Props: `size`, `color`, `visible`, `aria-label`.
   - iOS Liquid Glass: Use `liquid-glass-react` with `blurAmount=0.1`.
   - Windows: Use Fluent UI’s `Spinner` with `size`.
   - PrimeReact: Use `ProgressSpinner` with responsive `style`.

10. **Card**
    - Props: `children`, `image`, `title`, `subtitle`, `onClick`, `elevation`.
    - iOS Liquid Glass: Use `liquid-glass-react` with `cornerRadius=100`.
    - Windows: Use Fluent UI’s `Card` with `appearance`.
    - PrimeReact: Use `Card` with `header`, `subTitle`, responsive classes.

11. **Dropdown**
    - Props: `options` (array of `{ value, label }`), `value`, `onChange`, `placeholder`, `disabled`, `multiple`, `label`.
    - iOS Liquid Glass: Use `liquid-glass-react` for picker-style dropdown.
    - Windows: Use Fluent UI’s `Dropdown` with `options`.
    - PrimeReact: Use `Dropdown` with `options`, responsive `panelStyle`.

12. **ActionSheet**
    - Props: `open`, `actions` (array of `{ label, onClick, destructive }`), `onClose`, `title`, `cancelButton`, `backdropDismiss`.
    - iOS Liquid Glass: Use `liquid-glass-react` for bottom sheet with `elasticity=0.35`.
    - Windows: Use Fluent UI’s `ContextualMenu` with `items`.
    - PrimeReact: Use `Menu` with `model`, responsive positioning.

13. **AlertDialog**
    - Props: `open`, `title`, `message`, `actions`, `onClose`, `backdropDismiss`.
    - iOS Liquid Glass: Use `liquid-glass-react` for translucent dialog.
    - Windows: Use Fluent UI’s `Dialog` with `dialogContentProps`.
    - PrimeReact: Use `ConfirmDialog` with `header`, responsive `style`.

14. **Checkbox**
    - Props: `checked`, `onChange`, `disabled`, `label`, `aria-label`.
    - iOS Liquid Glass: Use `liquid-glass-react` for toggle-like appearance.
    - Windows: Use Fluent UI’s `Checkbox` with `label`.
    - PrimeReact: Use `Checkbox` with `inputId`, responsive classes.

15. **Form**
    - Props: `onSubmit`, `children`, `disabled`, `error`, `layout`.
    - iOS Liquid Glass: Use `liquid-glass-react` for translucent form background.
    - Windows: Use Fluent UI’s `Form` with `onSubmit`.
    - PrimeReact: Use `Fieldset` or custom form with TailwindCSS, responsive layout.

16. **FormSection**
    - Props: `children`, `title`, `description`, `divider`, `padding`.
    - iOS Liquid Glass: Use `liquid-glass-react` for grouped section.
    - Windows: Use Fluent UI’s `Stack` with `tokens` for spacing.
    - PrimeReact: Use `Fieldset` with `legend`, responsive styling.

17. **SegmentControl**
    - Props: `options` (array of `{ value, label }`), `value`, `onChange`, `variant` (tabs, segmented), `fullWidth`.
    - iOS Liquid Glass: Use `liquid-glass-react` for segmented buttons.
    - Windows: Use Fluent UI’s `TabList` with `tabs`.
    - PrimeReact: Use `TabView` with `panels`, responsive `style`.

18. **NavigationTitleBar**
    - Props: `title`, `actions` (array of `{ icon, onClick, label }`), `backButton`, `centerTitle`, `safeArea`.
    - iOS Liquid Glass: Use `liquid-glass-react` with `blurAmount=0.0625`, safe area support.
    - Windows: Use Fluent UI’s `CommandBar` with `items`.
    - PrimeReact: Use `Toolbar` with `start`, `end`, responsive classes.

### Test Page Requirements
Create a `testComponents/TestPage.tsx` file to showcase all components across each platform’s style (iOS Common, iOS Liquid Glass, Windows, PrimeReact). The test page uses tabs to switch between platform styles, displaying components with test data.

#### Test Page Structure
- **Tabs**: Use PrimeReact’s `TabView` for Web/Android, Fluent UI’s `TabList` for Windows, and a custom segmented control for iOS (Common and Liquid Glass). Tabs include:
  - iOS Common
  - iOS Liquid Glass
  - Windows
  - Web/Android
- **Content**: Each tab renders all components with test data, styled according to the platform.
- **Test Data**:
  - **Button**: Variants (primary, secondary), disabled, loading states.
  - **Navbar**: 4 items with icons, labels, and badges.
  - **Alert**: Success, error, and warning types, dismissible.
  - **Panel**: Card and modal variants with sample content.
  - **Input**: Text and password inputs with error states.
  - **List**: 5 items with labels and sublabels, selectable.
  - **Modal**: Open modal with title and actions.
  - **Icon**: 3 different icons (e.g., home, search, settings).
  - **Spinner**: Medium size, visible.
  - **Card**: Title, subtitle, and image placeholder.
  - **Dropdown**: 5 options, with placeholder.
  - **ActionSheet**: 3 actions, including destructive, with cancel button.
  - **AlertDialog**: Title, message, and 2 actions.
  - **Checkbox**: Checked and unchecked states with labels.
  - **Form**: 3 inputs and a submit button.
  - **FormSection**: 2 sections with titles and inputs.
  - **SegmentControl**: 3 options, with active selection.
  - **NavigationTitleBar**: Title, back button, and 2 action buttons.
- **Layout**: Responsive grid layout using TailwindCSS for Web/Android, Fluent UI’s `Stack` for Windows, and CSS with safe area insets for iOS.
- **Platform Detection**: Use `getPlatform()` to conditionally apply styles or components if needed.
- **Accessibility**: Ensure ARIA attributes and keyboard navigation support.

#### Test Page Implementation Notes
- **iOS Common**: Use standard CSS or a library like TailwindCSS, following Human Interface Guidelines (e.g., SF Symbols, rounded corners).
- **iOS Liquid Glass**: Wrap components in `LiquidGlass` from `liquid-glass-react` with props like `displacementScale=70`, `blurAmount=0.0625`, `elasticity=0.15`, `cornerRadius=999` for frosted effects.[](https://github.com/rdev/liquid-glass-react)
- **Windows**: Use Fluent UI React v9 components with Fluent Design styling (acrylic blur, rectangular shapes).
- **Web/Android**: Use PrimeReact components with TailwindCSS for responsiveness, ensuring mobile-friendly layouts.[](https://github.com/ahmedawaad1804/rn-liquid-glass-view)
- **Tab Switching**: Store the active tab in state and conditionally render components based on the selected platform style.
- **Test Data Rendering**: Use mock data (e.g., arrays for lists, strings for titles) to populate components, ensuring visual consistency.

### Additional Instructions
- **Dependencies**:
  - Install `liquid-glass-react` for iOS Liquid Glass (`npm install liquid-glass-react`).[](https://github.com/rdev/liquid-glass-react)
  - Install `@fluentui/react-components` for Windows (`npm install @fluentui/react-components`).[](https://github.com/ahmedawaad1804/rn-liquid-glass-view)
  - Install `primereact` and `primeicons` for Web/Android (`npm install primereact primeicons`).[](https://github.com/rdev/liquid-glass-react/activity)
  - Use TailwindCSS for responsive styling (`npm install tailwindcss`).
- **Platform Detection**: Implement a `getPlatform()` utility using Tauri’s `tauri::api::os` to return `ios`, `windows`, `android`, or `web`. Cache the result to avoid performance issues.
- **Accessibility**: Add ARIA attributes (`aria-label`, `aria-disabled`) and ensure keyboard navigation (Tab, Enter, Space).
- **Performance**:
  - Use React’s `memo` for components to prevent unnecessary re-renders.
  - Optimize Liquid Glass effects by memoizing props (e.g., `useMemo` for `glassStyle`).[](https://www.npmjs.com/package/%40specy/liquid-glass-react)
  - Minimize re-renders in the test page by using `useCallback` for event handlers.
- **Responsive Design**:
  - For Web/Android, use PrimeReact’s responsive features and TailwindCSS classes (e.g., `sm:`, `md:`).
  - For iOS, respect safe area insets and adapt to iPadOS multitasking.
  - For Windows, support scaling (e.g., 125%, 150%) and hover states.
